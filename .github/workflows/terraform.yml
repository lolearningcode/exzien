name: Terraform CI with Exzien Drift Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Download .tfstate from S3
      run: |
        aws s3 cp s3://exzien-tfstate-bucket/state/drift-test/terraform.tfstate terraform.tfstate
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Run Exzien Drift Check
      run: |
        response=$(curl -s -w "%{http_code}" \
          -X POST https://terraform-drift-detector-iosdevcleo.replit.app/v1/drift-check \
          -H "Authorization: Bearer ${{ secrets.EXZIEN_API_TOKEN }}" \
          -F "state_file=@terraform.tfstate" \
          -F "cloud_provider=aws" \
          -F "project_id=${{ github.repository }}" \
          -F "env=production" \
          -F "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -F "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}")
        
        http_code="${response: -3}"
        body="${response%???}"
        
        echo "HTTP Status: $http_code"
        echo "Response: $body"
        
        if [ "$http_code" -ne 200 ]; then
          echo "❌ Drift check failed"
          exit 1
        fi
        
        # Parse response and check for drift
        drift_detected=$(echo "$body" | jq -r '.drift_detected')
        drift_count=$(echo "$body" | jq -r '.resource_drift_count')
        
        if [ "$drift_detected" = "true" ]; then
          echo "⚠️  Infrastructure drift detected: $drift_count resources"
          echo "Scan ID: $(echo "$body" | jq -r '.scan_id')"
          
          # Optionally fail the build on drift
          # exit 1
        else
          echo "✅ No infrastructure drift detected"
        fi